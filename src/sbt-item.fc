;;
;;  TON SBT Item Smart Contract
;;

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;  MsgAddressInt authority_address
;;

global int storage::index;
global int init?;
global slice storage::collection_address;
global slice storage::owner_address;
global slice storage::authority_address;
global cell storage::content;

() load_data() impure {
  slice ds = get_data().begin_parse();

  storage::index              = ds~load_uint(64);
  storage::collection_address = ds~load_msg_addr();
  init?                       = false;

  if (ds.slice_bits() > 0) {
    init?                      = true;
    storage::owner_address     = ds~load_msg_addr();
    storage::content           = ds~load_ref();
    storage::authority_address = ds~load_msg_addr();
  }
}

() store_data() impure {
  set_data(
    begin_cell()
                    .store_uint(storage::index, 64)
                    .store_slice(storage::collection_address)
                    .store_slice(storage::owner_address)
                    .store_ref(storage::content)
                    .store_slice(storage::authority_address)
                    .end_cell()
  );
}

() send_msg(int flag, slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var body = begin_cell().store_uint(op, 32).store_uint(query_id, 64);
  if (~ builder_null?(payload)) {
    body = body.store_builder(payload);
  }

  var msg = begin_cell()
            .store_uint(flag, 6)
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(body.end_cell())
            .store_uint(query_id, 64);

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int query_id, slice sender_address, slice in_msg_body, int fwd_fees) impure inline {
  throw_if(404, equal_slices(storage::owner_address, null_addr()));
  slice new_owner_address = in_msg_body~load_msg_addr();
  force_chain(new_owner_address);

  slice response_destination = in_msg_body~load_msg_addr();
  in_msg_body~load_int(1); ;; this sbt don't use custom_payload
  int forward_amount = in_msg_body~load_coins();

  int rest_amount = my_balance - min_tons_for_storage();
  if (forward_amount) {
    rest_amount -= (forward_amount + fwd_fees);
  }
  int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
  if (need_response) {
    rest_amount -= fwd_fees;
  }

  throw_unless(402, rest_amount >= 0); ;; base sbt spends fixed amount of gas, will not check for response

  if (forward_amount) {
    send_msg(flag::regular(), new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(storage::owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
  }
  if (need_response) {
    force_chain(response_destination);

    ;; mode 1 = paying fees, revert on errors
    send_msg(flag::regular(), response_destination, rest_amount, op::excesses(), query_id, null(), 1);
  }

  storage::owner_address = new_owner_address;
  store_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

  load_data();

  if (~ init?) {
    throw_unless(405, equal_slices(storage::collection_address, sender_address));

    randomize_lt();
    storage::owner_address = in_msg_body~load_msg_addr();
    storage::content       = in_msg_body~load_ref();
    storage::authority_address = in_msg_body~load_msg_addr();

    store_data();
    return ();
  }

  int op = in_msg_body~load_uint(32);

  if (flags & 1) { ;; route all prove_ownership bounced messages to owner
    ;; first op was 0xffffffff, because of bounced, now we need to read real one
    op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::ownership_proof()) {
      var msg = begin_cell().store_slice(in_msg_body);

      ;; mode 64 = carry all the remaining value of the inbound message
      send_msg(flag::regular(), storage::owner_address, 0, op::ownership_proof_bounced(), query_id, msg, 64);
    }

    if (op == op::owner_info()) {
      int id = in_msg_body~load_uint(256);
      slice initiator = in_msg_body~load_msg_addr();

      var msg = begin_cell().store_uint(id, 256).store_slice(initiator).store_slice(in_msg_body);

      ;; mode 64 = carry all the remaining value of the inbound message
      send_msg(flag::regular(), initiator, 0, op::owner_info_bounced(), query_id, msg, 64);
    }
    return ();
  }

  int query_id = in_msg_body~load_uint(64);

  if (op == op::request_owner()) {
    slice dest = in_msg_body~load_msg_addr();
    cell body = in_msg_body~load_ref();
    int with_content = in_msg_body~load_uint(1);

    var msg = begin_cell()
                .store_uint(storage::index, 256)
                .store_slice(sender_address)
                .store_slice(storage::owner_address)
                .store_ref(body)
                .store_uint(with_content, 1);

    if (with_content != 0) {
      msg = msg.store_ref(storage::content);
    }

    ;; mode 64 = carry all the remaining value of the inbound message
    send_msg(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, msg, 64);
    return ();
  }
  if (op == op::prove_ownership()) {
    throw_unless(401, equal_slices(storage::owner_address, sender_address));

    slice dest = in_msg_body~load_msg_addr();
    cell body = in_msg_body~load_ref();
    int with_content = in_msg_body~load_uint(1);

    var msg = begin_cell()
                .store_uint(storage::index, 256)
                .store_slice(storage::owner_address)
                .store_ref(body)
                .store_uint(with_content, 1);

    if (with_content != 0) {
      msg = msg.store_ref(storage::content);
    }

    ;; mode 64 = carry all the remaining value of the inbound message
    send_msg(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, msg, 64);
    return ();
  }
  if (op == op::get_static_data()) {
    var msg = begin_cell().store_uint(storage::index, 256).store_slice(storage::collection_address);

    ;; mode 64 = carry all the remaining value of the inbound message
    send_msg(flag::regular(), sender_address, 0, op::report_static_data(), query_id, msg, 64);
    return ();
  }
  if (op == op::destroy()) {
    throw_unless(401, equal_slices(storage::owner_address, sender_address));
    raw_reserve(min_tons_for_storage(),0);
    send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);

    storage::owner_address = null_addr();
    storage::authority_address = null_addr();
    store_data();
    return ();
  }
  if (op == op::transfer()) {
    throw_unless(401, equal_slices(storage::authority_address, sender_address));

    transfer_ownership(my_balance, query_id, sender_address, in_msg_body, fwd_fee);
    return ();
  }
  throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
  load_data();
  return (init?, storage::index, storage::collection_address, storage::owner_address, storage::content);
}

slice get_authority_address() method_id {
  load_data();
  return storage::authority_address;
}
